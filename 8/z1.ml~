module type PQUEUE =
sig
	type priority
	type 'a t
	
	exception EmptyPQueue
	
	val empty: 'a t
	val insert: 'a t -> priority -> 'a -> 'a t
	val remove: 'a t -> priority * 'a * 'a t
end;;

module PQueue : PQUEUE with type priority = int =
struct
	type priority = int;;
	type 'a t = ('a * priority) list;;
	exception EmptyPQueue

	let empty = [];;
	let insert q p el = 
		let rec aux qs = match qs with
			| (v, vp)::qqs -> 
				if p >= vp then (el, p)::qs
				else (v, vp)::(aux qqs)
			| [] -> [(el, p)]
	in aux q;;
	let remove q = match q with
		| [] ->  raise EmptyPQueue
		| (el, p)::qs -> (p, el, qs);;
end;;

let sortints xs =
	let rec gather q acc = (try let (p, el, qs) = PQueue.remove q
		in gather qs (el::acc)
	with
		| PQueue.EmptyPQueue -> acc)
	in let q = PQueue.empty
	in let insert_q p el q = PQueue.insert q p el
	in let xswp = List.map (fun x -> (x,x)) xs
	in let fullq = List.fold_left 
		(fun oldq (el, p) -> insert_q p el oldq )
		q
		xswp
	in gather fullq [];;

let sxs = sortints [2;3;4;1;5;2;3;1;1;2];;

module type ORDTYPE =
sig
	type t
	val compare: t -> t -> int
end;;

module GeneralOrdPQueue (OrdType: ORDTYPE) : PQUEUE 
	with type priority = OrdType.t =
struct
	type priority = OrdType.t;;
	type 'a t = ('a * priority) list;;
	exception EmptyPQueue

	let empty = [];;
	let insert q p el = 
		let rec aux qs = match qs with
			| (v, vp)::qqs -> 
				if compare vp p >= 0 then (el, p)::qs
				else (v, vp)::(aux qqs)
			| [] -> [(el, p)]
	in aux q;;
	let remove q = match q with
		| [] ->  raise EmptyPQueue
		| (el, p)::qs -> (p, el, qs);;
end;;

let sortints2 xs =
	let module IntOrder: ORDTYPE with type t = int =
	struct
		type t = int
		let compare a b = b - a
	end
	in let module PQ = GeneralOrdPQueue(IntOrder)
	in let rec gather q acc = (try let (p, el, qs) = PQ.remove q
		in gather qs (el::acc)
	with
		| PQ.EmptyPQueue -> acc)
	in let q = PQ.empty
	in let insert_q p el q = PQ.insert q p el
	in let xswp = List.map (fun x -> (x,x)) xs
	in let fullq = List.fold_left 
		(fun oldq (el, p) -> insert_q p el oldq )
		q
		xswp
	in gather fullq [];;

let sxs2 = sortints2 [2;3;4;1;5;2;3;1;1;2];;
